// @ts-check
const { test, expect } = require('@playwright/test');

test.describe('Flujo E2E: crear sala, unirse y arrancar juego', () => {
  test('host crea, invitado se une, host inicia juego y ambos llegan a game', async ({ browser }) => {
    console.log('üöÄ Iniciando test de flujo de salas...');
    
    // Crear dos contextos para simular dos jugadores
    const context1 = await browser.newContext();
    const context2 = await browser.newContext();
    
    const host = await context1.newPage();
    const guest = await context2.newPage();

    try {
      console.log('üì± Navegando a index...');
      
      // HOST: ir a index y crear sala
      await host.goto('https://tutifruti-3ii6.onrender.com', { timeout: 15000 });
      console.log('‚úÖ Host lleg√≥ a index');
      
      await host.fill('#username', 'host-e2e');
      await host.click('#createRoomButton');
      console.log('‚úÖ Host hizo clic en bot√≥n crear sala');
      
      await host.waitForURL('**/create-room.html', { timeout: 15000 });
      console.log('‚úÖ Host lleg√≥ a create-room.html');
      
      await host.fill('#roomName', 'Sala Test E2E');
      await host.click('#createRoomButton');
      console.log('‚úÖ Host cre√≥ sala');
      
      // Obtener c√≥digo de sala
      await host.waitForSelector('#roomCodeValue', { state: 'visible', timeout: 15000 });
      const roomCode = await host.textContent('#roomCodeValue');
      console.log(`‚úÖ C√≥digo de sala obtenido: ${roomCode}`);
      
      // GUEST: ir a index y unirse
      console.log('üë• Invitado se une...');
      await guest.goto('https://tutifruti-3ii6.onrender.com', { timeout: 15000 });
      await guest.fill('#username', 'guest-e2e');
      await guest.click('#joinRoomButton');
      
      await guest.waitForURL('**/join-room.html', { timeout: 10000 });
      await guest.fill('#joinRoomId', roomCode.trim());
      await guest.click('#joinRoomButton');
      console.log('‚úÖ Invitado se uni√≥ a la sala');
      
      // Esperar que ambos est√©n en la sala
      await host.waitForSelector('.player-item', { state: 'visible', timeout: 10000 });
      await guest.waitForSelector('.waiting-room', { state: 'visible', timeout: 10000 });
      console.log('‚úÖ Ambos est√°n en la sala de espera');
      
      // HOST: iniciar juego
      console.log('üéÆ Iniciando juego...');
      await host.click('#goToGameButton');
      
      // Ambos deber√≠an ir al juego
      await host.waitForURL('**/game.html*', { timeout: 10000 });
      await guest.waitForURL('**/game.html*', { timeout: 10000 });
      console.log('‚úÖ Ambos llegaron al juego');
      
      // Esperar que se cargue la interfaz del juego
      await host.waitForSelector('#categoriesGrid .category-card', { timeout: 10000 });
      await guest.waitForSelector('#categoriesGrid .category-card', { timeout: 10000 });
      console.log('‚úÖ Interfaz del juego cargada');
      
      // UI de juego: nombre de jugador visible y contador >= 2
      await expect(host.locator('#currentPlayerName')).toContainText('host-e2e');
      await expect(guest.locator('#currentPlayerName')).toContainText('guest-e2e');
      await expect(host.locator('#playersCount')).toContainText('2/');
      await expect(guest.locator('#playersCount')).toContainText('2/');
      console.log('‚úÖ Informaci√≥n de jugadores verificada');
      
      // Verificar que la letra se gener√≥ autom√°ticamente
      await expect(host.locator('#currentLetter')).toHaveText(/[A-Z√ë√Å√â√ç√ì√ö√ú]/);
      await expect(guest.locator('#currentLetter')).toHaveText(/[A-Z√ë√Å√â√ç√ì√ö√ú]/);
      console.log('‚úÖ Letra generada autom√°ticamente');
      
      // Verificar que los inputs est√°n habilitados
      await expect(host.locator('#input-NOMBRE')).toBeEnabled();
      await expect(guest.locator('#input-NOMBRE')).toBeEnabled();
      console.log('‚úÖ Inputs habilitados');
      
      console.log('üéâ Test completado exitosamente!');
      
    } catch (error) {
      console.error('‚ùå Error en test:', error.message);
      throw error;
    } finally {
      await context1.close();
      await context2.close();
    }
  });
});


